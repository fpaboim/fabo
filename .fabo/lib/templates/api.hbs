import C from "#fabo/shared/constants.js"
import {{name}} from '#fabo/models/{{name}}'
import aqp from 'api-query-params';

// methods
///////////////////////////////////////////////////////////////////////////////
const methods = {
{{#apiEntries}}
  {{#if this.count}}
  count: async (req, res, next) => {
    const user = req.user
    {{#if this.count.role}}
    if (!user) {
      return res.status(400).send({errors: {auth: {message: 'User must be logged in.'}}})
    }
    {{#if (hasAuth this.count.role)}}
    if (!user.roles.includes({{this.count.role}})) {
      return res.status(400).send({errors: {auth: {message: 'User not authorized.'}}})
    }
    {{/if}}
    {{/if}}

    let { filter } = aqp(req.query);
    {{#if this.count.owner}}
    filter = {
      ...filter,
      {{this.count.owner}}: user._id
    }
    {{/if}}

    const count = await {{../name}}.count(filter).lean()
    return count
  },
  {{/if}}
  {{#if this.delete}}
  delete: async (req, res, next) => {
    const user = req.user
    {{#if this.delete.role}}
    if (!user) {
      return res.status(400).send({errors: {auth: {message: 'User must be logged in.'}}})
    }
    {{#if (hasAuth this.delete.role)}}
    if (!user.roles.includes({{this.delete.role}})) {
      return res.status(400).send({errors: {auth: {message: 'User not authorized.'}}})
    }
    {{/if}}
    {{/if}}

    let { filter } = aqp(req.query);
    {{#if this.delete.owner}}
    filter = {
      ...filter,
      {{this.delete.owner}}: user._id
    }
    {{/if}}
    const del = await {{../name}}.deleteOne(filter)
                                 .lean()
    return del
  },
  {{/if}}
  {{#if this.find}}
  find: async (req, res, next) => {
    const user = req.user
    {{#if this.find.role}}
    if (!user) {
      return res.status(400).send({errors: {auth: {message: 'User must be logged in.'}}})
    }
    {{#if (hasAuth this.find.role)}}
    if (!user.roles.includes({{this.find.role}})) {
      return res.status(400).send({errors: {auth: {message: 'User not authorized.'}}})
    }
    {{/if}}
    {{/if}}

    let { filter } = aqp(req.query);
    {{#if this.find.owner}}
    filter = {
      ...filter,
      {{this.find.owner}}: user._id
    }
    {{/if}}
    const found = await {{../name}}.find(filter)
                                   .skip(skip)
                                   .limit(limit)
                                   .sort(sort)
                                   .select(projection)
                                   .populate(population)
                                   .lean()
    return found
  },
  {{/if}}
  {{#if this.findone}}
  findone: async (req, res, next) => {
    const user = req.user
    {{#if this.findone.role}}
    if (!user) {
      return res.status(400).send({errors: {auth: {message: 'User must be logged in.'}}})
    }
    {{#if (hasAuth this.findone.role)}}
    if (!user.roles.includes({{this.findone.role}})) {
      return res.status(400).send({errors: {auth: {message: 'User not authorized.'}}})
    }
    {{/if}}
    {{/if}}

    let { filter } = aqp(req.query);
    {{#if this.findone.owner}}
    filter = {
      ...filter,
      {{this.findone.owner}}: user._id
    }
    {{/if}}
    const found = await {{../name}}.findOne(filter)
                                   .select(projection)
                                   .populate(population)
                                   .lean()
    return found
  },
  {{/if}}
  {{#if this.create}}
  create: async (req, res, next) => {
    const user = req.user
    {{#if this.create.role}}
    if (!user) {
      return res.status(400).send({errors: {auth: {message: 'User must be logged in.'}}})
    }
    {{#if (hasAuth this.create.role)}}
    if (!user.roles.includes({{this.create.role}})) {
      return res.status(400).send({errors: {auth: {message: 'User not authorized.'}}})
    }
    {{/if}}
    {{/if}}

    const body = req.body
    const created = await {{../name}}.create(body)
                                     .lean()
    return created
  },
  {{/if}}
  {{#if this.update}}
  update: async (req, res, next) => {
    const user = req.user
    {{#if this.update.role}}
    if (!user) {
      return res.status(400).send({errors: {auth: {message: 'User must be logged in.'}}})
    }
    {{#if (hasAuth this.update.role)}}
    if (!user.roles.includes({{this.update.role}})) {
      return res.status(400).send({errors: {auth: {message: 'User not authorized.'}}})
    }
    {{/if}}
    {{/if}}

    let { filter } = aqp(req.query);
    {{#if this.update.owner}}
    filter = {
      ...filter,
      {{this.update.owner}}: user._id
    }
    {{/if}}
    const body = req.body
    const updated = await {{../name}}.update(filter, body)
                                   .lean()
    return updated
  },
  {{/if}}
{{/apiEntries}}
};

export default methods
