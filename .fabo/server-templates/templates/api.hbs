import C from "../../shared/constants.js"
import {{name}} from './'
import aqp from 'api-query-params';

// methods
///////////////////////////////////////////////////////////////////////////////
const methods = {
{{#apiEntries}}
  {{#if this.count}}
  count: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.count}}

    let { filter } = aqp(req.query);
    {{#if this.count.owner}}
    filter = {
      ...filter,
      {{this.count.owner}}: user._id
    }
    {{/if}}

    const count = await {{../name}}.count(filter).lean()
    return count
  },
  {{/if}}

  {{#if this.delete}}
  delete: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.delete}}

    let { filter } = aqp(req.query);
    {{#if this.delete.owner}}
    filter = {
      ...filter,
      {{this.delete.owner}}: user._id
    }
    {{/if}}
    const del = await {{../name}}.deleteOne(filter)
                                 .lean()
    return del
  },
  {{/if}}
  {{#if this.find}}
  find: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.find}}

    let { filter } = aqp(req.query);
    {{#if this.find.owner}}
    filter = {
      ...filter,
      {{this.find.owner}}: user._id
    }
    {{/if}}
    const found = await {{../name}}
      .find(filter)
      .skip(skip)
      .limit(limit)
      .sort(sort)
      .select(projection)
      .populate(population)
      .lean()

    return found
  },
  {{/if}}

  {{#if this.findone}}
  findone: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.findone}}

    let { filter } = aqp(req.query);
    {{#if this.findone.owner}}
    filter = {
      ...filter,
      {{this.findone.owner}}: user._id
    }
    {{/if}}
    const found = await {{../name}}.findOne(filter)
                                   .select(projection)
                                   .populate(population).lean()

    return found
  },
  {{/if}}

  {{#if this.create}}
  create: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.create}}

    const body = req.body
    const created = await {{../name}}.create(body).lean()

    return created
  },
  {{/if}}

  {{#if this.updateone}}
  updateone: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.updateone}}

    let { filter } = aqp(req.query);
    {{#if this.updateone.owner}}
    filter = {
      ...filter,
      {{this.updateone.owner}}: user._id
    }
    {{/if}}
    const body = req.body
    const updated = await {{../name}}.updateone(filter, body).lean()

    return updated
  },
  {{/if}}

  {{#if this.updatemany}}
  updatemany: async (req, res, next) => {
    const user = req.user
    {{> buildAPI_authPartial this.updatemany}}

    let { filter } = aqp(req.query);
    {{#if this.updatemany.owner}}
    filter = {
      ...filter,
      {{this.updatemany.owner}}: user._id
    }
    {{/if}}
    const body = req.body
    const updatemany = await {{../name}}.updatemany(filter, body).lean()

    return updatemany
  },
  {{/if}}

{{/apiEntries}}
};

export default methods
