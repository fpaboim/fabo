import C from "../../shared/constants.js"
import {{name}} from '../{{name}}/index.js'
import aqp from 'api-query-params';

const allowQueryBase = ['filter','skip','limit','sort','fields','populate']
{{!-- {{#each querySettings}}
{{#if this}}
{{@key}}-{{this}}
{{/if}}
{{/each}}

{{#hasKey querySettings 'sort'}}
hasfilter
{{/hasKey}}
 --}}
// methods
///////////////////////////////////////////////////////////////////////////////
const methods = {
{{#apiEntries}}
  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'create') (eq entry.type 'create'))
      (eq @key 'create'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user    = req.user
      let   body    = req.body
      let  bodyKeys = Object.keys(body)
      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preAllow entry}}
      {{> buildAPI_preDeny entry}}
      {{> buildAPI_preSet entry}}

      const created = await new {{../../name}}(body).save()

      return res.status(200).send(created.toObject())
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.create', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}

  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'find') (eq entry.type 'find'))
      (eq @key 'find'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user = req.user
      let  query = req.query
      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      let { filter,skip,limit,sort,projection,population } = aqp(query);
      {{> buildAPI_postQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      {{#if entry.filters}}
      filter = {
        ...filter,
        {{#each entry.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const found = await {{../../name}}
        .find(filter)
        {{#buildAPI_useField ../../querySettings 'skip' entry.skip}}
        .skip(skip)
        {{/buildAPI_useField}}
        {{#buildAPI_useField ../../querySettings 'limit' entry.limit}}
        .limit(limit)
        {{/buildAPI_useField}}
        {{#buildAPI_useField ../../querySettings 'sort' entry.sort}}
        .sort(sort)
        {{/buildAPI_useField}}
        {{#buildAPI_useField ../../querySettings 'populate' entry.populate}}
        .populate(population)
        {{/buildAPI_useField}}
        {{#buildAPI_useField ../../querySettings 'fields' entry.fields}}
        .select(projection)
        {{/buildAPI_useField}}
        .lean()

      return res.status(200).send(found)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.find', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}

  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'findone') (eq entry.type 'findone'))
      (eq @key 'findone'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user    = req.user
      let query     = req.query
      let queryKeys = Object.keys(query)
      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      let { filter,projection,population } = aqp(query);
      {{> buildAPI_postQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      {{#if entry.filters}}
      filter = {
        ...filter,
        {{#each entry.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const found = await {{../../name}}.findOne(filter)
                                     {{#buildAPI_useField ../../querySettings 'populate' entry.populate}}
                                     .populate(population)
                                     {{/buildAPI_useField}}
                                     {{#buildAPI_useField ../../querySettings 'fields' entry.fields}}
                                     .select(projection)
                                     {{/buildAPI_useField}}
                                     .lean()

      if (found == undefined) {
        return res.status(400).send({errors: {unknown: {message: 'Not found.'}}})
      }
      return res.status(200).send(found)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.findone', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}

  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'updateone') (eq entry.type 'updateone'))
      (eq @key 'updateone'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user    = req.user
      let   body    = req.body
      let  bodyKeys = Object.keys(body)
      let query     = req.query
      let queryKeys = Object.keys(query)
      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preAllow entry}}
      {{> buildAPI_preDeny entry}}
      {{> buildAPI_preSet entry}}
      {{> buildAPI_preQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      let { filter } = aqp(req.query);
      const updated = await {{../../name}}.updateOne(filter, body)

      return res.status(200).send(updated)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.updateone', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}


  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'updatemany') (eq entry.type 'updatemany'))
      (eq @key 'updatemany'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user    = req.user
      let   body    = req.body
      let  bodyKeys = Object.keys(body)

      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preAllow entry}}
      {{> buildAPI_preDeny entry}}
      {{> buildAPI_preSet entry}}

      let { filter } = aqp(req.query);
      {{#if entry.filters}}
      filter = {
        ...filter,
        {{#each entry.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const updatemany = await {{../../name}}.updateMany(filter, body)

      return res.status(200).send(updatemany.toObject())
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.updatemany', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}

  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'count') (eq entry.type 'count'))
      (eq @key 'count'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user = req.user
      let  query = req.query
      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      let { filter } = aqp(query);
      {{#if entry.filters}}
      filter = {
        ...filter,
        {{#each entry.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}

      const count = await {{../../name}}.count(filter)

      return res.status(200).send(count)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.count', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}

  {{#each this as |entry|}}
    {{#if (or
      (or (eq entry.alias 'delete') (eq entry.type 'delete'))
      (eq @key 'delete'))}}
  {{@key}}: async (req, res, next) => {
    try {
      const user = req.user
      let  query = req.query
      {{> buildAPI_authPartial entry}}
      {{> buildAPI_preQuery settings=(buildAPI_mergeSettings ../../querySettings entry)}}
      let { filter } = aqp(query);
      {{#if entry.filters}}
      filter = {
        ...filter,
        {{#each entry.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const del = await {{../../name}}.deleteOne(filter)

      return res.status(200).send(del)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../../name}}.delete', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
    {{/if}}
  {{/each}}


{{/apiEntries}}
};

export default methods
