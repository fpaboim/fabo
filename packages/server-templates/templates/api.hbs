import C from "../../shared/constants.js"
import {{name}} from '../{{name}}'
import aqp from 'api-query-params';

// methods
///////////////////////////////////////////////////////////////////////////////
const methods = {
{{#apiEntries}}
  {{#if this.count}}
  count: async (req, res, next) => {
    try {
      const user = req.user
      {{> buildAPI_authPartial this.count}}
      {{> buildAPI_prePartial this.count}}

      let { filter } = aqp(req.query);
      {{#if this.count.filters}}
      filter = {
        ...filter,
        {{#each this.count.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}

      const count = await {{../name}}.count(filter)

      return res.status(200).send(count)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.count', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

  {{#if this.delete}}
  delete: async (req, res, next) => {
    try {
      const user = req.user
      {{> buildAPI_authPartial this.delete}}
      {{> buildAPI_prePartial this.delete}}

      let { filter } = aqp(req.query);
      {{#if this.delete.filters}}
      filter = {
        ...filter,
        {{#each this.delete.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const del = await {{../name}}.deleteOne(filter)

      return res.status(200).send(del)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.delete', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

  {{#if this.find}}
  find: async (req, res, next) => {
    try {
      const user = req.user
      {{> buildAPI_authPartial this.find}}
      {{> buildAPI_prePartial this.find}}

      let { filter,skip,limit,sort,projection,population } = aqp(req.query);
      {{#if this.find.filters}}
      filter = {
        ...filter,
        {{#each this.find.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const found = await {{../name}}
        .find(filter)
        .skip(skip)
        .limit(limit)
        .sort(sort)
        .select(projection)
        .populate(population)
        .lean()

      return res.status(200).send(found)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.find', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

  {{#if this.findone}}
  findone: async (req, res, next) => {
    try {
      const user = req.user
      {{> buildAPI_authPartial this.findone}}
      {{> buildAPI_prePartial this.findone}}

      let { filter,population } = aqp(req.query);
      {{#if this.findone.filters}}
      filter = {
        ...filter,
        {{#each this.findone.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const found = await {{../name}}.findOne(filter)
                                     .populate(population).lean()

      if (found == undefined) {
        return res.status(400).send({errors: {unknown: {message: 'Not found.'}}})
      }
      return res.status(200).send(found)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.findone', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

  {{#if this.create}}
  create: async (req, res, next) => {
    try {
      const user = req.user
      let   body = req.body
      {{> buildAPI_authPartial this.create}}
      {{> buildAPI_prePartial this.create}}

      const created = await new {{../name}}(body).save()

      return res.status(200).send(created.toObject())
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.create', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

  {{#if this.updateone}}
  updateone: async (req, res, next) => {
    try {
      const user = req.user
      let   body = req.body
      {{> buildAPI_authPartial this.updateone}}
      {{> buildAPI_prePartial this.updateone}}

      let { filter } = aqp(req.query);
      {{#if this.updateone.filters}}
      filter = {
        ...filter,
        {{#each this.updateone.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const updated = await {{../name}}.updateOne(filter, body)

      return res.status(200).send(updated)
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.updateone', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

  {{#if this.updatemany}}
  updatemany: async (req, res, next) => {
    try {
      const user = req.user
      let   body = req.body

      {{> buildAPI_authPartial this.updatemany}}
      {{> buildAPI_prePartial this.updatemany}}

      let { filter } = aqp(req.query);
      {{#if this.updatemany.filters}}
      filter = {
        ...filter,
        {{#each this.updatemany.filters}}
        {{this.field}}: {{this.value}}
        {{/each}}
      }
      {{/if}}
      const updatemany = await {{../name}}.updateMany(filter, body)

      return res.status(200).send(updatemany.toObject())
    } catch(err) {
      console.log('** ERROR **: Unknown error on {{../name}}.updatemany', err)
      return res.status(400).send({errors: {unknown: {message: 'Unknown error.'}}})
    }
  },
  {{/if}}

{{/apiEntries}}
};

export default methods
